if {![namespace exists ::IMEX]} { namespace eval ::IMEX {} }
set ::IMEX::dataVar [file dirname [file normalize [info script]]]
set ::IMEX::libVar ${::IMEX::dataVar}/libs

catch { setDesignMode -flowEffort standard }
catch { setDesignMode -process 40 }
catch { setAnalysisMode -analysisType onChipVariation }
catch { setAnalysisMode -asyncChecks noAsync }
catch { setAnalysisMode -checkType setup }
catch { setAnalysisMode -clkSrcPath true }
catch { setAnalysisMode -clockPropagation sdcControl }
catch { setAnalysisMode -cppr both }
catch { setAnalysisMode -usefulSkew true }
catch { setOptMode -activeHoldViews { BC_av LT_av ML_av } }
catch { setOptMode -activeSetupViews { WC_av WCL_av WCZ_av } }
catch { setOptMode -autoHoldViews { BC_av } }
catch { setOptMode -autoSetupViews { WCL_av WCZ_av ML_av LT_av} }
catch { setOptMode -autoViewHoldTargetSlack 0 }
catch { setOptMode -deleteInst true }
catch { setOptMode -drcMargin 0 }
catch { setOptMode -effort high }
catch { setOptMode -fixDrc true }
catch { setOptMode -optimizeFF true }
catch { setOptMode -placementSetupViews { WCL_av  } }
catch { setOptMode -postRouteDrvRecovery true }
catch { setOptMode -preserveAllSequential false }
catch { setOptMode -setupTargetSlack 0 }
catch { setExtractRCMode  -layerIndependent 1 -effortLevel medium -engine postRoute -total_c_th 0 -relative_c_th 1 -coupling_c_th 0.1 }
catch {setNanoRouteMode -quiet -drouteAntennaFactor 1.000000}
catch {setNanoRouteMode -quiet -droutePostRouteSpreadWire "auto"}
catch {setNanoRouteMode -quiet -droutePostRouteSwapVia "multiCut"}
catch {setNanoRouteMode -quiet -drouteStartIteration 0}
catch {setNanoRouteMode -quiet -drouteUseLefPinTaperRule true}
catch {setNanoRouteMode -quiet -extractDesignSignature 111715051}
catch {setNanoRouteMode -quiet -extractRcModelFile "${::IMEX::libVar}/misc/rc_model.bin"}
catch {setNanoRouteMode -quiet -extractThirdPartyCompatible false}
catch {setNanoRouteMode -quiet -grouteExpTdStdDelay 25.100000}
catch {setNanoRouteMode -quiet -grouteExpTdUseTifTimingEngineForImportDesign false}
catch {setNanoRouteMode -quiet -routeBottomRoutingLayer 1}
catch {setNanoRouteMode -quiet -routeFillerInstPrefix "FILLER"}
catch {setNanoRouteMode -quiet -routeReInsertFillerCellList "OD25DCAP64BWP OD25DCAP32BWP OD25DCAP16BWP DCAP8BWP DCAP4BWP DCAPBWP FILL3BWP FILL2BWP FILL1BWP"}
catch {setNanoRouteMode -quiet -routeReInsertFillerCellListFromFile false}
catch {setNanoRouteMode -quiet -routeTopRoutingLayer 6}
catch {setNanoRouteMode -quiet -routeWithSiDriven false}
catch {setNanoRouteMode -quiet -routeWithSiPostRouteFix false}
catch {setNanoRouteMode -quiet -routeWithTimingDriven true}
catch {setNanoRouteMode -quiet -timingEngine "${::IMEX::libVar}/misc/.timing_file_61330.tif.gz"}

catch { setPlaceMode -place_global_reorder_scan false }
catch { setIlmMode -keepHighFanoutPorts true -keepLoopBack false -keepFlatten true }
catch { setUsefulSkewMode -ecoRoute false }
catch { setSrouteMode -viaConnectToShape {ring stripe} }
catch { setDelayCalMode -enable_high_fanout true }
catch { setDelayCalMode -eng_copyNetPropToNewNet true }
catch { setDelayCalMode -engine aae }
catch { setDelayCalMode -ignoreNetLoad false }
catch { setDelayCalMode -SIAware true }
catch { setAddRingMode -avoid_short false }
catch { setAddRingMode -extend_over_row false }
catch { setAddRingMode -ignore_rows false }
catch { setAddRingMode -orthogonal_only true }
catch { setAddRingMode -ring_target default }
catch { setAddRingMode -skip_crossing_trunks none }
catch { setAddRingMode -skip_via_on_pin standardcell }
catch { setAddRingMode -skip_via_on_wire_shape noshape }
catch { setAddRingMode -stacked_via_bottom_layer M1 }
catch { setAddRingMode -stacked_via_top_layer AP }
catch { setAddRingMode -via_using_exact_crossover_size true }
catch { setHierMode -disableArt false }
catch { setHierMode -reportPostRouteArtTiming false }
catch { setHierMode -trialRouteHonorReadOnly false }
catch { setTieHiLoMode -cell {{TIEHBWP TIELBWP}} }
catch { setTieHiLoMode -maxFanout 1 }
catch { setSIMode -separate_delta_delay_on_data true }
catch { setAddStripeMode -allow_jog {padcore_ring block_ring} }
catch { setAddStripeMode -break_at block_ring }
catch { setAddStripeMode -extend_to_closest_target ring }
catch { setAddStripeMode -ignore_block_check true }
catch { setAddStripeMode -ignore_nondefault_domains false }
catch { setAddStripeMode -orthogonal_only false }
catch { setAddStripeMode -partial_set_thru_domain false }
catch { setAddStripeMode -route_over_rows_only true }
catch { setAddStripeMode -rows_without_stripes_only false }
catch { setAddStripeMode -skip_via_on_pin standardcell }
catch { setAddStripeMode -skip_via_on_wire_shape noshape }
catch { setAddStripeMode -spacing_from_block 0 }
catch { setAddStripeMode -spacing_type edge_to_edge }
catch { setAddStripeMode -split_vias false }
catch { setAddStripeMode -stacked_via_bottom_layer M1 }
catch { setAddStripeMode -stacked_via_top_layer AP }
catch { setAddStripeMode -stop_at_last_wire_for_area false }
catch { setAddStripeMode -stripe_min_length stripe_width }
catch { setAddStripeMode -trim_antenna_back_to_shape none }
catch { setAddStripeMode -via_using_exact_crossover_size false }
catch { setRouteMode -earlyGlobalRouteSecondPG false }
catch { setFillerMode -core {OD25DCAP64BWP OD25DCAP32BWP OD25DCAP16BWP DCAP8BWP DCAP4BWP DCAPBWP FILL3BWP FILL2BWP FILL1BWP} }
catch { setFillerMode -corePrefix FILLER }
catch { setFPlanMode -maxIoHeight false }
catch { setFPlanMode -powerRailLayer {} }
